{"version":3,"sources":["app.js","app-module.es6","builder/decorators/typehead/bootstrap-typehead-decorator.tpl.html","builder/decorators/simple-array/bootstrap-simple-array-decorator.tpl.html","builder/decorators/select-box/bootstrap-select-box-decorator.tpl.html","builder/decorators/number/bootstrap-number-decorator.tpl.html","builder/decorators/datepicker/datepicker.html","builder/decorators/ace/ui-ace.html","builder/decorators/accordion-array/bootstrap-accordion-array-decorator.tpl.html","builder/views/open.tpl.html","builder/views/builder.tpl.html","builder/builder-module.es6","builder/decorators/typehead/bootstrap-typehead-decorator.es6","builder/decorators/simple-array/bootstrap-simple-array-decorator.es6","builder/decorators/select-box/bootstrap-select-box-decorator.es6","builder/decorators/number/bootstrap-decorator.es6","builder/decorators/datepicker/bootstrap-datepicker.es6","builder/decorators/ace/bootstrap-ui-ace.es6","builder/decorators/accordion-array/bootstrap-accordion-array-decorator.es6","builder/factories/converter-factory.es6","builder/controllers/builder-controller.es6","builder/builder-routes.es6","app-routes.es6"],"names":["_classCallCheck","instance","Constructor","TypeError","angular","module","run","$templateCache","put","config","lockerProvider","defaults","driver","namespace","separator","eventsEnabled","extend","growlProvider","globalTimeToLive","success","error","warning","info","bootstrapTypeHeadDecorator","schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider","typehead","name","schema","options","form","type","_","isUndefined","stdFormObj","lookup","stringify","path","string","unshift","addMapping","createDirective","$inject","bootstrapSimpleArrayDecorator","bootstrapDecorator","datepicker","format","f","key","ace","bootstrapAccordionArrayDecorator","Converter","ConverterBase","generateStandardAttributes","field","output","undefined","formProps","properties","title","description","pick","push","updateForm","attr","value","index","findKey","generateTextField","generateTextareaField","generateEmailField","generateDropdownField","generateDateField","generateTimeField","generateDateTimeField","buildSegment","builder","camelCase","replace","generateFields","model","isArray","fields","forEach","factory","BuilderCtrl","growl","locker","$scope","$uibModal","generateOutput","update","vm","console","log","display","copy","persistForm","length","forms","snakeCase","this","get","enum","items","open","default","condition","notitle","validationMessage","onChange","feedback","disableSuccessState","disableErrorState","placeholder","ngModelOptions","readonly","htmlClass","destroyStrategy","copyValueTo","fieldHtmlClass","labelHtmlClass","fieldAddonLeft","fieldAddonRight","onClick","showAdvanced","required","helpvalue","instructionsVisible","style","add","remove","startEmpty","saveForm","$broadcast","$valid","newForm","openForm","modalInstance","templateUrl","controller","$uibModalInstance","close","confirm","slice","cancel","dismiss","controllerAs","resolve","result","then","$watch","$stateProvider","state","url","$urlRouterProvider","otherwise"],"mappings":"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","file":"app-bb3a1a52b2.js","sourcesContent":["'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name schemaFormBuilder\n   * @description\n   *\n   */\n  angular.module('schemaFormBuilder', ['builder', 'ui.bootstrap']);\n})();\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/decorators/typehead/bootstrap-typehead-decorator.tpl.html',\n    '<div class=\"form-group\">\\n' +\n    '  <label class=\"control-label\" ng-if=\"showTitle()\">{{showTitle()}}</label>\\n' +\n    '  <input class=\"form-control\" type=\"text\" ng-model=\"$$value$$\"\\n' +\n    '         uib-typeahead=\"item for item in form.options | filter:$viewValue | limitTo:8\">\\n' +\n    '</div>');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/decorators/simple-array/bootstrap-simple-array-decorator.tpl.html',\n    '<div sf-array=\"form\" class=\"schema-form-array {{form.htmlClass}}\" ng-model=\"$$value$$\"\\n' +\n    '     ng-model-options=\"form.ngModelOptions\"><label class=\"control-label\" ng-show=\"showTitle()\">{{ form.title }}</label>\\n' +\n    '  <ol class=\"list-group\" ng-model=\"modelArray\" ui-sortable=\"\">\\n' +\n    '    <li class=\"list-group-item {{form.fieldHtmlClass}}\" ng-repeat=\"item in modelArray track by $index\">\\n' +\n    '      <button ng-hide=\"form.readonly || form.remove === null\" ng-click=\"deleteFromArray($index)\"\\n' +\n    '              style=\"position: absolute;z-index: 20;right: 10px;\" type=\"button\" class=\"close pull-right\"><span\\n' +\n    '          aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\\n' +\n    '      <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"></sf-decorator>\\n' +\n    '    </li>\\n' +\n    '  </ol>\\n' +\n    '  <div class=\"clearfix\" style=\"padding: 15px;\">\\n' +\n    '    <button ng-hide=\"form.readonly || form.add === null\" ng-click=\"appendToArray()\" type=\"button\"\\n' +\n    '            class=\"btn {{ form.style.add || \\'btn-default\\' }} pull-right\"><i class=\"glyphicon glyphicon-plus\"></i> {{\\n' +\n    '      form.add || \\'Add\\'}}\\n' +\n    '    </button>\\n' +\n    '  </div>\\n' +\n    '  <div class=\"help-block\" ng-show=\"(hasError() && errorMessage(schemaError())) || form.description\"\\n' +\n    '       ng-bind-html=\"(hasError() && errorMessage(schemaError())) || form.description\"></div>\\n' +\n    '</div>');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/decorators/select-box/bootstrap-select-box-decorator.tpl.html',\n    '<div class=\"form-group\">\\n' +\n    '  <label class=\"control-label\" ng-if=\"showTitle()\">{{showTitle()}}</label>\\n' +\n    '  <select-box model=\"$$value$$\" config=\"form.config\" value-field=\"{{form.valueField}}\" display-field=\"{{form.displayField}}\"></select-box>\\n' +\n    '</div>');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/decorators/number/bootstrap-number-decorator.tpl.html',\n    '<div class=\"form-group schema-form-{{form.type}} {{form.htmlClass}}\"\\n' +\n    '     ng-class=\"{\\'has-error\\': form.disableErrorState !== true && hasError(), \\'has-success\\': form.disableSuccessState !== true && hasSuccess(), \\'has-feedback\\': form.feedback !== false }\">\\n' +\n    '  <label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{\\'sr-only\\': !showTitle()}\"\\n' +\n    '         for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label>\\n' +\n    '  <input  string-to-number ng-if=\"!form.fieldAddonLeft && !form.fieldAddonRight\" ng-show=\"form.key\" type=\"number\" step=\"{{ form.precision || \\'any\\' }}\"\\n' +\n    '         sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\"\\n' +\n    '         id=\"{{form.key.slice(-1)[0]}}\" ng-model-options=\"form.ngModelOptions\" ng-model=\"$$value$$\"\\n' +\n    '         ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\"\\n' +\n    '         aria-describedby=\"{{form.key.slice(-1)[0] + \\'Status\\'}}\">\\n' +\n    '  <div ng-if=\"form.fieldAddonLeft || form.fieldAddonRight\"\\n' +\n    '       ng-class=\"{\\'input-group\\': (form.fieldAddonLeft || form.fieldAddonRight)}\">\\n' +\n    '    <span ng-if=\"form.fieldAddonLeft\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonLeft\"></span>\\n' +\n    '    <input  string-to-number ng-show=\"form.key\" type=\"number\" step=\"{{ form.precision || \\'any\\' }}\" sf-changed=\"form\"\\n' +\n    '           placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\"\\n' +\n    '           id=\"{{form.key.slice(-1)[0]}}\" ng-model-options=\"form.ngModelOptions\" ng-model=\"$$value$$\"\\n' +\n    '           ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\"\\n' +\n    '           aria-describedby=\"{{form.key.slice(-1)[0] + \\'Status\\'}}\">\\n' +\n    '    <span ng-if=\"form.fieldAddonRight\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonRight\"></span>\\n' +\n    '  </div>\\n' +\n    '  <span ng-if=\"form.feedback !== false\" class=\"form-control-feedback\"\\n' +\n    '        ng-class=\"evalInScope(form.feedback) || {\\'glyphicon\\': true, \\'glyphicon-ok\\': hasSuccess(), \\'glyphicon-remove\\': hasError() }\"\\n' +\n    '        aria-hidden=\"true\">\\n' +\n    '  </span> <span ng-if=\"hasError() || hasSuccess()\" id=\"{{form.key.slice(-1)[0] + \\'Status\\'}}\"\\n' +\n    '                class=\"sr-only\">{{ hasSuccess() ? \\'(success)\\' : \\'(error)\\' }}</span>\\n' +\n    '  <div class=\"help-block\" sf-message=\"form.description\"></div>\\n' +\n    '</div>');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/decorators/datepicker/datepicker.html',\n    '<div class=\"form-group schema-form-{{form.type}} {{form.htmlClass}}\"\\n' +\n    '     ng-class=\"{\\'has-error\\': form.disableErrorState !== true && hasError(), \\'has-success\\': form.disableSuccessState !== true && hasSuccess(), \\'has-feedback\\': form.feedback !== false }\">\\n' +\n    '  <label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{\\'sr-only\\': !showTitle()}\"\\n' +\n    '         for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label>\\n' +\n    '\\n' +\n    '  <p class=\"input-group\">\\n' +\n    '      <!--TODO:: removed schema-validate=\"form\" consider having a custom validator-->\\n' +\n    '      <input type=\"text\"\\n' +\n    '           id=\"{{form.key.slice(-1)[0]}}\"\\n' +\n    '           class=\"form-control\"\\n' +\n    '           sf-changed=\"form\"\\n' +\n    '           placeholder=\"{{form.placeholder}}\"\\n' +\n    '           uib-datepicker-popup=\"dd.MM.yyyy\"\\n' +\n    '           ng-model=\"$$value$$\"\\n' +\n    '           ng-model-options=\"form.ngModelOptions\"\\n' +\n    '           is-open=\"form.open\"\\n' +\n    '           min-date=\"form.minDate\"\\n' +\n    '           max-date=\"form.maxDate\"\\n' +\n    '           init-date=\"form.defaultDate\"\\n' +\n    '           close-text=\"Close\"/>\\n' +\n    '        <span class=\"input-group-btn\">\\n' +\n    '             <button type=\"button\" class=\"btn btn-default\" ng-click=\"form.open = !form.open\"><i\\n' +\n    '                 class=\"fa fa-calendar-o\"></i></button>\\n' +\n    '        </span>\\n' +\n    '  </p>\\n' +\n    '  <span class=\"help-block\">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span>\\n' +\n    '</div>');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/decorators/ace/ui-ace.html',\n    '<div class=\"form-group\" ng-class=\"{\\'has-error\\': hasError()}\">\\n' +\n    '    <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\\n' +\n    '\\n' +\n    '    <div ui-ace=\"form.aceOptions\" style=\"form.style\" ng-model=\"$$value$$\" schema-validate=\"form\"></div>\\n' +\n    '\\n' +\n    '    <span class=\"help-block\">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span>\\n' +\n    '</div>');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/decorators/accordion-array/bootstrap-accordion-array-decorator.tpl.html',\n    '<div sf-array=\"form\" class=\"schema-form-array {{form.htmlClass}}\" ng-model=\"$$value$$\"\\n' +\n    '     ng-model-options=\"form.ngModelOptions\">\\n' +\n    '    <uib-accordion ng-model=\"modelArray\" ui-sortable=\"\">\\n' +\n    '        <uib-accordion-group ng-repeat=\"item in modelArray track by $index\" is-open=\"item.open\">\\n' +\n    '            <uib-accordion-heading class=\"{{form.fieldHtmlClass}}\">\\n' +\n    '                {{interp(form.title,{\\'$index\\':$index, value: item}) || $index}}\\n' +\n    '            </uib-accordion-heading>\\n' +\n    '            <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"></sf-decorator>\\n' +\n    '            <button ng-hide=\"form.readonly || form.remove === null\" ng-click=\"deleteFromArray($index)\" type=\"button\"\\n' +\n    '                    class=\"btn btn-danger pull-right\">\\n' +\n    '                Delete\\n' +\n    '                <i class=\"fa fa-trash\"></i>\\n' +\n    '            </button>\\n' +\n    '        </uib-accordion-group>\\n' +\n    '    </uib-accordion>\\n' +\n    '    <div class=\"clearfix bottom-spaced\">\\n' +\n    '        <button ng-hide=\"form.readonly || form.add === null\" ng-click=\"appendToArray();form.openLast()\" type=\"button\"\\n' +\n    '                class=\"btn {{ form.style.add || \\'btn-default\\' }} pull-right\">{{\\n' +\n    '            form.add || \\'Add\\'}}\\n' +\n    '        </button>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"help-block\" ng-show=\"(hasError() && errorMessage(schemaError())) || form.description\"\\n' +\n    '         ng-bind-html=\"(hasError() && errorMessage(schemaError())) || form.description\"></div>\\n' +\n    '</div>\\n' +\n    '\\n' +\n    '\\n' +\n    '');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/views/open.tpl.html',\n    '<div class=\"modal-body\">\\n' +\n    '    <table class=\"table table-striped\">\\n' +\n    '        <tr ng-repeat=\"form in modal.forms\">\\n' +\n    '            <td>{{ form.name}}</td>\\n' +\n    '            <td>\\n' +\n    '                <button class=\"btn btn-success btn-sm pull-right\" ng-click=\"modal.open(form)\">Open</button>\\n' +\n    '                <button class=\"btn btn-danger margin-right-20 btn-sm pull-right\" ng-click=\"modal.delete($index, form)\">Delete</button>\\n' +\n    '            </td>\\n' +\n    '        </tr>\\n' +\n    '    </table>\\n' +\n    '</div>\\n' +\n    '<div class=\"modal-footer\">\\n' +\n    '    <button class=\"btn btn-success btn-sm\" type=\"button\" ng-click=\"modal.open({fields: []})\">New Form</button>\\n' +\n    '    <button class=\"btn btn-warning btn-sm\" type=\"button\" ng-click=\"modal.cancel()\">Cancel</button>\\n' +\n    '</div>');\n}]);\n\nangular.module('schemaFormBuilder').run(['$templateCache', function($templateCache) {\n  $templateCache.put('builder/views/builder.tpl.html',\n    '\\n' +\n    '<div class=\"body-section\">\\n' +\n    '    <div class=\"header\">\\n' +\n    '        <h4>\\n' +\n    '            <img src=\"images/logo.png\" alt=\"\">\\n' +\n    '            Schema Form <strong>Builder</strong> <span class=\"grey\">/ {{ builder.model.name || \\'Untitled Form\\'}}</span>\\n' +\n    '            <a class=\"btn btn-sm btn-primary pull-right\" ng-click=\"builder.newForm()\">New Form</a>\\n' +\n    '            <a class=\"btn btn-sm btn-warning pull-right margin-right-20\" ng-click=\"builder.openForm()\">My previous Forms</a>\\n' +\n    '        </h4>\\n' +\n    '    </div>\\n' +\n    '    <div class=\"container\">\\n' +\n    '        <!--<uib-alert type=\"default\">Build your own form</uib-alert>-->\\n' +\n    '\\n' +\n    '        <div class=\"row\">\\n' +\n    '            <div class=\"col-sm-6 builder\">\\n' +\n    '                <form name=\"builderForm\" ng-submit=\"builder.saveForm(builderForm)\">\\n' +\n    '                    <div sf-schema=\"builder.schema\" sf-form=\"builder.form\" sf-model=\"builder.model\"\\n' +\n    '                         sf-options=\"{ formDefaults: { ngModelOptions: { updateOn: \\'blur\\' } }}\"></div>\\n' +\n    '                </form>\\n' +\n    '            </div>\\n' +\n    '            <div class=\"col-sm-6 preview\">\\n' +\n    '                <h4>preview</h4>\\n' +\n    '                <div sf-schema=\"builder.display.schema\" sf-form=\"builder.display.form\"\\n' +\n    '                     sf-model=\"builder.display.model\"></div>\\n' +\n    '            </div>\\n' +\n    '        </div>\\n' +\n    '        <div class=\"instructions col-xs-12\" ng-class=\"{\\'visible\\' : builder.instructionsVisible}\">\\n' +\n    '            <div class=\"\">\\n' +\n    '                <div ng-if=\"builder.model.type == \\'schema-form\\'\">\\n' +\n    '                    <h2>Instructions <button class=\"btn btn-sm btn-primary pull-right\"\\n' +\n    '                    ng-click=\"builder.instructionsVisible = false\">back</button> </h2>\\n' +\n    '                    <p>In your angular project do the following</p>\\n' +\n    '                    <h4>First, Install angular-schema form</h4>\\n' +\n    '                    <p>Using bower:</p>\\n' +\n    '                    <pre>bower install angular-schema-form</pre>\\n' +\n    '                    <p>Using npm:</p>\\n' +\n    '                    <pre>npm install angular-schema-form</pre></p>\\n' +\n    '                    <p>Then add it as a dependency to your module</p>\\n' +\n    '                    <pre>angular.module(\\'myModule\\', [\\'schemaForm\\'])</pre>\\n' +\n    '                    <div class=\"separated\"></div>\\n' +\n    '                    <h4>Secondly, Specify your schema and form</h4>\\n' +\n    '                    <p>In your controller, add the following schema and form an pass it to your views</p>\\n' +\n    '                    <div class=\"row\">\\n' +\n    '                        <div class=\"col-sm-6\">\\n' +\n    '                            <h5>Schema</h5>\\n' +\n    '                            <pre> {{ builder.output.schema | json }}</pre>\\n' +\n    '                        </div>\\n' +\n    '                        <div class=\"col-sm-6\">\\n' +\n    '                            <h5>Forms</h5>\\n' +\n    '                            <pre> {{ builder.output.form | json }}</pre>\\n' +\n    '                        </div>\\n' +\n    '                    </div>\\n' +\n    '                    <div class=\"separated\"></div>\\n' +\n    '                    <h4>Lastly, Display the form in your view</h4>\\n' +\n    '                    <pre class=\"language-html\" data-lang=\"html\">\\n' +\n    '                        &lt;form name=\"myForm\" ng-submit=\"submit()\"&gt; <br>\\n' +\n    '                        &lt;div sf-schema=\"schema\" sf-form=\"form\" sf-model=\"model\"&gt;&lt;/div&gt;<br>\\n' +\n    '                        &lt;input type=\"submit\" value=\"Submit\"&gt;<br>\\n' +\n    '                            &lt;button type=\"button\" ng-click=\"goBack()\"&gt;Cancel&lt;/button&gt;<br>\\n' +\n    '                        &lt;/form&gt;\\n' +\n    '                    </pre>\\n' +\n    '                </div>\\n' +\n    '                <div ng-if=\"builder.model.type == \\'bootstrap\\'\">\\n' +\n    '                    <h3>To be created</h3>\\n' +\n    '                    <pre> {{ builder.output | json }}</pre>\\n' +\n    '                </div>\\n' +\n    '\\n' +\n    '            </div>\\n' +\n    '        </div>\\n' +\n    '    </div>\\n' +\n    '</div>');\n}]);\n\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name builder\n   * @description\n   *\n   */\n  angular.module('builder', ['angular-growl', 'angular-locker', 'schemaForm', 'ui.bootstrap', 'ui.router', 'ui.sortable']).config(['lockerProvider', function config(lockerProvider) {\n    lockerProvider.defaults({\n      driver: 'local',\n      namespace: 'ro',\n      separator: '.',\n      eventsEnabled: true,\n      extend: {}\n    });\n  }]).config(['growlProvider', function (growlProvider) {\n    growlProvider.globalTimeToLive({ success: 1000, error: 2000, warning: 3000, info: 4000 });\n  }]);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular.module('builder').config(bootstrapTypeHeadDecorator);\n\n  function bootstrapTypeHeadDecorator(schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n    var typehead = function typehead(name, schema, options) {\n      var form;\n      if (schema.type === 'typehead' || schema.type['x-schema-form'] === 'typehead' || !_.isUndefined(form) && form.type === 'typehead') {\n        form = schemaFormProvider.stdFormObj(name, schema, options);\n        options.lookup[sfPathProvider.stringify(options.path)] = form;\n        return form;\n      }\n    };\n\n    schemaFormProvider.defaults.string.unshift(typehead);\n\n    schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'typehead', 'builder/decorators/typehead/bootstrap-typehead-decorator.tpl.html');\n    schemaFormDecoratorsProvider.createDirective('typehead', 'builder/decorators/typehead/bootstrap-typehead-decorator.tpl.html');\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular.module('builder').config(bootstrapSimpleArrayDecorator);\n\n  function bootstrapSimpleArrayDecorator(schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n    schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'simple-array', 'builder/decorators/simple-array/bootstrap-simple-array-decorator.tpl.html');\n    schemaFormDecoratorsProvider.createDirective('simple-array', 'builder/decorators/simple-array/bootstrap-simple-array-decorator.tpl.html');\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular.module('builder').config(bootstrapTypeHeadDecorator);\n\n  function bootstrapTypeHeadDecorator(schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n    schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'select-box', 'builder/decorators/select-box/bootstrap-select-box-decorator.tpl.html');\n    schemaFormDecoratorsProvider.createDirective('select-box', 'builder/decorators/select-box/bootstrap-select-box-decorator.tpl.html');\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular.module('builder').config(bootstrapDecorator);\n\n  function bootstrapDecorator(schemaFormDecoratorsProvider) {\n    schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'number', 'builder/decorators/number/bootstrap-number-decorator.tpl.html');\n  }\n})();\n'use strict';\n\nangular.module('schemaForm').config(['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider', function (schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n  var datepicker = function datepicker(name, schema, options) {\n    if (schema.type === 'string' && schema.format === 'date') {\n      var f = schemaFormProvider.stdFormObj(name, schema, options);\n      f.key = options.path;\n      f.type = 'datepicker';\n      options.lookup[sfPathProvider.stringify(options.path)] = f;\n      return f;\n    }\n  };\n\n  schemaFormProvider.defaults.string.unshift(datepicker);\n\n  //Add to the bootstrap directive\n  schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'datepicker', 'builder/decorators/datepicker/datepicker.html');\n  schemaFormDecoratorsProvider.createDirective('datepicker', 'builder/decorators/datepicker/datepicker.html');\n}]);\n'use strict';\n\nangular.module('schemaForm').config(['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider', function (schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n  var ace = function ace(name, schema, options) {\n    if (schema.type === 'ace') {\n      var f = schemaFormProvider.stdFormObj(name, schema, options);\n      f.key = options.path;\n      f.type = 'ace';\n      options.lookup[sfPathProvider.stringify(options.path)] = f;\n      return f;\n    }\n  };\n\n  schemaFormProvider.defaults.string.unshift(ace);\n\n  //Add to the bootstrap directive\n  schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'ace', 'builder/decorators/ace/ui-ace.html');\n  schemaFormDecoratorsProvider.createDirective('ace', 'builder/decorators/ace/ui-ace.html');\n}]);\n'use strict';\n\n(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular.module('builder').config(bootstrapAccordionArrayDecorator);\n\n  function bootstrapAccordionArrayDecorator(schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n    //var accordion = function (name, schema, options) {\n    //    var f = schemaFormProvider.stdFormObj(name, schema, options);\n    //\n    //    f.openLast = function(){\n    //      alert('open');\n    //    };\n    //    options.lookup[sfPathProvider.stringify(options.path)] = f;\n    //    return f;\n    //};\n    //\n    //schemaFormProvider.defaults.array.unshift(accordion);\n\n    schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'accordion-array', 'builder/decorators/accordion-array/bootstrap-accordion-array-decorator.tpl.html');\n    schemaFormDecoratorsProvider.createDirective('accordion-array', 'builder/decorators/accordion-array/bootstrap-accordion-array-decorator.tpl.html');\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name builder.factory:Converter\n   *\n   * @description\n   *\n   */\n  angular.module('builder').factory('Converter', Converter);\n\n  function Converter() {\n    var ConverterBase = {};\n    ConverterBase.generateStandardAttributes = function (field, output) {\n\n      var form = undefined,\n          formProps = ['key', 'condition', 'onChange', 'notitle', 'showAdvanced', 'validationMessage', 'onChange', 'ngModelOptions', 'condition', 'fieldAddonLeft', 'fieldAddonRight', 'description', 'showAdvanced', 'validationMessage', 'onChange', 'feedback', 'disableSuccessState', 'disableErrorState', 'placeholder', 'ngModelOptions', 'readonly', 'htmlClass', 'destroyStrategy', 'copyValueTo', 'fieldHtmlClass', 'labelHtmlClass'];\n      output.schema.properties[field.key] = {\n        title: field.title,\n        description: field.description\n      };\n\n      form = _.pick(field, formProps);\n      output.form.push(form);\n      return output;\n    };\n\n    ConverterBase.updateForm = function (output, key, attr, value) {\n      var index = _.findKey(output.form, 'key', key);\n      output.form[index][attr] = value;\n      return output;\n    };\n\n    ConverterBase.generateTextField = function (field, output) {\n      output.schema.properties[field.key]['type'] = 'string';\n      return output;\n    };\n    ConverterBase.generateTextareaField = function (field, output) {\n      output.schema.properties[field.key]['type'] = 'string';\n      output = ConverterBase.updateForm(output, field.key, 'type', 'textarea');\n      return output;\n    };\n    ConverterBase.generateEmailField = function (field, output) {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'email';\n      return output;\n    };\n    ConverterBase.generateDropdownField = function (field, output) {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['enum'] = field.options;\n      return output;\n    };\n    ConverterBase.generateDateField = function (field, output) {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'date';\n      return output;\n    };\n    ConverterBase.generateTimeField = function (field, output) {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'time';\n      return output;\n    };\n    ConverterBase.generateDateTimeField = function (field, output) {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'date-time';\n      return output;\n    };\n\n    var buildSegment = function buildSegment(field, output) {\n      var builder = _.camelCase('generate_' + field.type.replace('-', '_') + '_field');\n      output = ConverterBase.generateStandardAttributes(field, output);\n      if (typeof ConverterBase[builder] === 'function') return ConverterBase[builder](field, output);\n      output.schema.properties[field.key] = {\n        type: field.type,\n        title: field.title\n      };\n      return output;\n    };\n\n    ConverterBase.generateFields = function (model) {\n      var output = { schema: { type: 'object', properties: {} }, form: [] };\n      if (_.isArray(model.fields)) {\n        model.fields.forEach(function (field) {\n          if (!_.isUndefined(field.type) && !_.isUndefined(field.key)) output = buildSegment(field, output);\n        });\n      }\n      return output;\n    };\n    return ConverterBase;\n  }\n})();\n'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function () {\n  'use strict';\n\n  var BuilderCtrl = function BuilderCtrl(Converter, growl, locker, $scope, $uibModal) {\n    _classCallCheck(this, BuilderCtrl);\n\n    var vm = this;\n\n    vm.forms = locker.get('schema_forms', {} /* {\n                                             'sample_form': {\n                                             name: 'Sample Form',\n                                             type: 'schema-form',\n                                             fields: [\n                                             {\n                                             type: 'text',\n                                             key: 'first_name',\n                                             title: 'First name',\n                                             open: false\n                                             },\n                                             {\n                                             type: 'text',\n                                             key: 'last_name',\n                                             title: 'Last name',\n                                             open: false\n                                             },\n                                             {\n                                             type: 'email',\n                                             key: 'email',\n                                             title: 'Email',\n                                             open: false\n                                             },\n                                             {\n                                             type: 'date',\n                                             key: 'dob',\n                                             title: 'Date of Birth',\n                                             open: false\n                                             },\n                                             {\n                                             type: 'dropdown',\n                                             key: 'marital-status',\n                                             title: 'Marital Status',\n                                             open: false\n                                             },\n                                             {\n                                             type: 'date-time',\n                                             key: 'check-in',\n                                             title: 'Check In',\n                                             open: false\n                                             },\n                                             {\n                                             type: 'date-time',\n                                             key: 'check-out',\n                                             title: 'Check Out',\n                                             open: false\n                                             },\n                                             {\n                                             type: 'textarea',\n                                             key: 'bio',\n                                             title: 'Biography',\n                                             open: false\n                                             }\n                                             ]\n                                             }\n                                             }*/);\n    console.log(vm.forms);\n    vm.schema = {\n      type: 'object',\n      title: 'Comment',\n      properties: {\n        name: {\n          type: 'string'\n        },\n        type: {\n          type: 'string',\n          title: 'Form Output',\n          'enum': ['schema-form', 'bootstrap']\n        },\n        fields: {\n          type: 'array',\n          title: 'Fields',\n          items: {\n            type: 'object',\n            properties: {\n              open: {\n                type: 'boolean',\n                'default': true\n              },\n              type: {\n                title: 'Type',\n                type: 'string',\n                'enum': ['text', 'textarea', 'number', 'email', 'password', 'dropdown', 'radios', 'radios-inline', 'radiobuttons', 'checkbox', 'checkboxes', 'boolean', 'date', 'time', 'date-time', 'button', 'submit', 'reset', 'help', 'template']\n              },\n              key: {\n                title: 'Key',\n                type: 'string'\n              },\n              //description: 'Unique identifier'\n              title: {\n                condition: 'model.notitle',\n                title: 'Title',\n                type: 'string'\n              },\n              notitle: {\n                type: 'boolean',\n                title: 'Don\\'t show title'\n              },\n              description: {\n                title: 'Description',\n                type: 'string'\n              },\n              validationMessage: {\n                title: 'Validation Message',\n                description: 'A custom validation error message. It can be a string, an object with error codes as key and messages as values or a custom message function',\n                type: 'string'\n              },\n              onChange: {\n                title: 'onChange',\n                description: 'onChange event handler, expression or function. For expression, <code>modelValue</code> and <code>form</code> are both available. For a function, they will be passed as parameters in that order',\n                type: 'string'\n              },\n              feedback: {\n                title: 'Feedback Icon',\n                description: 'Inline feedback icons. To turn off just set feedback to false. If set to a string that string is evaluated by a ngClass in the decorators scope. If not set att all the default value is <code>{ \"glyphicon\": true, \"glyphicon-ok\": hasSuccess(), \"glyphicon-remove\": hasError() }</code>',\n                type: 'string'\n              },\n              disableSuccessState: {\n                type: 'boolean',\n                title: 'Disable Success State',\n                'default': false\n              },\n              disableErrorState: {\n                type: 'boolean',\n                title: 'Disable Error State',\n                'default': false\n              },\n              placeholder: {\n                title: 'Placeholder',\n                description: 'Placeholder on inputs and textarea',\n                type: 'string'\n              },\n              ngModelOptions: {\n                title: 'ng-Model Options',\n                description: 'Passed along to ng-model-options',\n                type: 'string'\n              },\n              readonly: {\n                type: 'boolean',\n                title: 'Readonly',\n                'default': false\n              },\n              htmlClass: {\n                title: 'Class',\n                description: 'CSS Class(es) to be added to the container div e.g. : \\'street foobar\\'',\n                type: 'string'\n              },\n              destroyStrategy: {\n                title: 'Destroy Strategy',\n                description: 'One of <code>null</code>, <code>empty</code> , <code>remove</code>, or <code>retain</code>. Changes model on $destroy event. default is <code>remove</code>.',\n                type: 'string'\n              },\n              copyValueTo: {\n                title: 'Copy Value To',\n                description: 'Copy values to these schema keys e.g [\\'address.street\\']. The receiving fields can be shown, but the intent for them is to be hidden.',\n                type: 'string'\n              },\n              fieldHtmlClass: {\n                title: 'Field Class',\n                description: 'CSS Class(es) to be added to field input (or similar)',\n                type: 'string'\n              },\n              labelHtmlClass: {\n                title: 'Label Class',\n                description: 'CSS Class(es) to be added to the label of the field (or similar)',\n                type: 'string'\n              },\n              condition: {\n                title: 'Condition',\n                description: 'Show or hide field depending on an angular expression e.g \\'model.age < 18\\'. The expression has access to <code>model</code>, <code>modelValue</code>, <code> arrayIndex</code>.  The condition need not reference a model value it could be anything on scope.',\n                type: 'string'\n              },\n              fieldAddonLeft: {\n                title: 'Field Addon - Left',\n                description: 'Add html code to left of input field. For reference check <a target=\\'_blank\\' href=\\'http://getbootstrap.com/components/#input-groups\\'>bootstrap input groups</a>.',\n                type: 'string'\n              },\n              fieldAddonRight: {\n                title: 'Field Addon - Right',\n                description: 'Add html code to right of input field. For reference check <a target=\\'_blank\\' href=\\'http://getbootstrap.com/components/#input-groups\\'>bootstrap input groups</a>.',\n                type: 'string'\n              },\n              onClick: {\n                title: 'onClick',\n                description: 'Function to call when a button/submit is clicked',\n                type: 'string'\n              },\n              showAdvanced: {\n                title: 'Show advance options',\n                type: 'boolean'\n              }\n            },\n            required: ['type', 'key']\n          }\n        }\n      },\n      required: ['name']\n    };\n    vm.model = {};\n    vm.form = [{\n      type: 'section',\n      htmlClass: 'row main-info',\n      items: [{\n        key: 'name',\n        htmlClass: 'col-sm-6',\n        placeholder: 'name of the form',\n        notitle: true,\n        fieldHtmlClass: 'field-name',\n        labelHtmlClass: 'field-name-label'\n      }, {\n        key: 'type',\n        htmlClass: 'col-sm-6',\n        //notitle: true,\n        fieldHtmlClass: 'output-type',\n        labelHtmlClass: 'output-type-label'\n      }]\n    }, {\n      type: 'section',\n      htmlClass: 'my-field row',\n      items: [{\n        type: 'section',\n        htmlClass: 'col-sm-6',\n        items: [{\n          type: 'help',\n          helpvalue: '<h4>My Fields:</h4>'\n        }]\n      }, {\n        type: 'section',\n        htmlClass: 'col-sm-6',\n        items: [{\n          type: 'button',\n          onClick: function onClick() {\n            vm.instructionsVisible = true;\n          },\n          style: 'btn-success btn-sm pull-right',\n          title: 'Generate Schema'\n        }, {\n          type: 'submit',\n          style: 'btn-success btn-sm pull-right margin-right-20',\n          title: 'Save'\n        }]\n      }]\n    }, {\n      key: 'fields',\n      type: 'accordion-array',\n      title: '{{ value.title || \"Field \"+ $index}}',\n      add: 'Add a new Field',\n      remove: 'Remove Field',\n      startEmpty: true,\n      items: [{\n        key: 'fields[].title',\n        htmlClass: 'hide-label',\n        placeholder: 'Title'\n      }, {\n        type: 'section',\n        htmlClass: 'row',\n        items: [{\n          key: 'fields[].type',\n          placeholder: 'Type',\n          notitle: true,\n          htmlClass: 'col-sm-6 hide-label'\n        }, {\n          key: 'fields[].key',\n          //type: 'section',\n          placeholder: 'Key (Unique Identifier)',\n          notitle: true,\n          htmlClass: 'col-sm-6 hide-label'\n        }]\n      }, {\n        key: 'fields[].open',\n        notitle: true,\n        type: 'hidden'\n      }, {\n        key: 'fields[].description',\n        type: 'textarea',\n        placeholder: 'Description',\n        notitle: true\n      }, {\n        type: 'section',\n        htmlClass: 'row',\n        items: [{\n          key: 'fields[].notitle',\n          htmlClass: 'col-sm-6'\n        }, {\n          key: 'fields[].showAdvanced',\n          htmlClass: 'col-sm-6'\n        }]\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        type: 'help',\n        helpvalue: '<hr/>'\n      }, {\n        type: 'section',\n        htmlClass: 'row',\n        items: [{\n          type: 'section',\n          htmlClass: 'col-md-4',\n          items: [{\n            condition: 'model.fields[arrayIndex].showAdvanced',\n            key: 'fields[].disableSuccessState'\n          }]\n        }, {\n          type: 'section',\n          htmlClass: 'col-md-4',\n          items: [{\n            condition: 'model.fields[arrayIndex].showAdvanced',\n            key: 'fields[].disableErrorState'\n          }]\n        }, {\n          type: 'section',\n          htmlClass: 'col-md-4',\n          items: [{\n            condition: 'model.fields[arrayIndex].showAdvanced',\n            key: 'fields[].readonly'\n          }]\n        }]\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        type: 'help',\n        helpvalue: '<hr/>'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].validationMessage',\n        type: 'textarea'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].onChange',\n        type: 'textarea'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].feedback'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].placeholder'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].ngModelOptions',\n        type: 'textarea'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].htmlClass'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].destroyStrategy'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].copyValueTo'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].fieldHtmlClass'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].labelHtmlClass'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].condition'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        'key': 'fields[].fieldAddonLeft'\n      }, {\n        condition: 'model.fields[arrayIndex].showAdvanced',\n        key: 'fields[].fieldAddonRight'\n      }]\n    }];\n    vm.output = { schema: {}, form: [] };\n\n    vm.saveForm = function (form) {\n      $scope.$broadcast('schemaFormValidate');\n      if (form.$valid) {\n        persistForm();\n      }\n    };\n    vm.newForm = function () {\n      persistForm();\n      vm.model = {\n        fields: []\n      };\n      console.log(vm.model);\n    };\n    vm.openForm = function () {\n      var modalInstance = $uibModal.open({\n        templateUrl: 'builder/views/open.tpl.html',\n        controller: function controller($uibModalInstance, forms) {\n          var vm = this;\n          vm.forms = forms;\n          vm.open = function (form) {\n            $uibModalInstance.close(form);\n          };\n\n          vm['delete'] = function (index, form) {\n            if (confirm('About to delete ' + form.name)) {\n              vm.forms.slice(vm.forms, index, 1);\n              locker.put('schema_forms', vm.forms);\n            }\n          };\n\n          vm.cancel = function () {\n            $uibModalInstance.dismiss();\n          };\n        },\n        controllerAs: 'modal',\n        resolve: {\n          forms: function forms() {\n            return vm.forms;\n          }\n        }\n      });\n\n      modalInstance.result.then(function (form) {\n        persistForm();\n        vm.model = form;\n        generateOutput(vm.model);\n      });\n    };\n\n    if (!vm.model.name) {\n      vm.openForm();\n    }\n\n    function generateOutput(update) {\n      vm.output = Converter.generateFields(update);\n      console.log(vm.output);\n      vm.display = angular.copy(vm.output);\n    }\n\n    function persistForm() {\n      if (vm.model.name && vm.model.name.length > 0) {\n        vm.forms[_.snakeCase(vm.model.name)] = vm.model;\n        locker.put('schema_forms', vm.forms);\n        growl.success('Form ' + vm.model.name + ' Saved');\n      }\n    }\n\n    $scope.$watch(function () {\n      return vm.model;\n    }, function (update) {\n      generateOutput(update);\n    }, true);\n  }\n  /**\n   * @ngdoc object\n   * @name builder.controller:BuilderCtrl\n   *\n   * @description\n   *\n   */\n  ;\n\n  angular.module('builder').controller('BuilderCtrl', BuilderCtrl);\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('builder').config(config);\n\n  function config($stateProvider) {\n    $stateProvider.state('builder', {\n      url: '/builder',\n      templateUrl: 'builder/views/builder.tpl.html',\n      controller: 'BuilderCtrl',\n      controllerAs: 'builder'\n    });\n  }\n})();\n'use strict';\n\n(function () {\n  'use strict';\n\n  angular.module('schemaFormBuilder').config(config);\n\n  function config($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/builder');\n  }\n})();","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name schemaFormBuilder\n   * @description\n   *\n   */\n  angular\n    .module('schemaFormBuilder', [\n      'builder',\n      'ui.bootstrap'\n    ]);\n}());\n","<div class=\"form-group\">\n  <label class=\"control-label\" ng-if=\"showTitle()\">{{showTitle()}}</label>\n  <input class=\"form-control\" type=\"text\" ng-model=\"$$value$$\"\n         uib-typeahead=\"item for item in form.options | filter:$viewValue | limitTo:8\">\n</div>","<div sf-array=\"form\" class=\"schema-form-array {{form.htmlClass}}\" ng-model=\"$$value$$\"\n     ng-model-options=\"form.ngModelOptions\"><label class=\"control-label\" ng-show=\"showTitle()\">{{ form.title }}</label>\n  <ol class=\"list-group\" ng-model=\"modelArray\" ui-sortable=\"\">\n    <li class=\"list-group-item {{form.fieldHtmlClass}}\" ng-repeat=\"item in modelArray track by $index\">\n      <button ng-hide=\"form.readonly || form.remove === null\" ng-click=\"deleteFromArray($index)\"\n              style=\"position: absolute;z-index: 20;right: 10px;\" type=\"button\" class=\"close pull-right\"><span\n          aria-hidden=\"true\">&times;</span><span class=\"sr-only\">Close</span></button>\n      <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"></sf-decorator>\n    </li>\n  </ol>\n  <div class=\"clearfix\" style=\"padding: 15px;\">\n    <button ng-hide=\"form.readonly || form.add === null\" ng-click=\"appendToArray()\" type=\"button\"\n            class=\"btn {{ form.style.add || 'btn-default' }} pull-right\"><i class=\"glyphicon glyphicon-plus\"></i> {{\n      form.add || 'Add'}}\n    </button>\n  </div>\n  <div class=\"help-block\" ng-show=\"(hasError() && errorMessage(schemaError())) || form.description\"\n       ng-bind-html=\"(hasError() && errorMessage(schemaError())) || form.description\"></div>\n</div>","<div class=\"form-group\">\n  <label class=\"control-label\" ng-if=\"showTitle()\">{{showTitle()}}</label>\n  <select-box model=\"$$value$$\" config=\"form.config\" value-field=\"{{form.valueField}}\" display-field=\"{{form.displayField}}\"></select-box>\n</div>","<div class=\"form-group schema-form-{{form.type}} {{form.htmlClass}}\"\n     ng-class=\"{'has-error': form.disableErrorState !== true && hasError(), 'has-success': form.disableSuccessState !== true && hasSuccess(), 'has-feedback': form.feedback !== false }\">\n  <label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{'sr-only': !showTitle()}\"\n         for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label>\n  <input  string-to-number ng-if=\"!form.fieldAddonLeft && !form.fieldAddonRight\" ng-show=\"form.key\" type=\"number\" step=\"{{ form.precision || 'any' }}\"\n         sf-changed=\"form\" placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\"\n         id=\"{{form.key.slice(-1)[0]}}\" ng-model-options=\"form.ngModelOptions\" ng-model=\"$$value$$\"\n         ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\"\n         aria-describedby=\"{{form.key.slice(-1)[0] + 'Status'}}\">\n  <div ng-if=\"form.fieldAddonLeft || form.fieldAddonRight\"\n       ng-class=\"{'input-group': (form.fieldAddonLeft || form.fieldAddonRight)}\">\n    <span ng-if=\"form.fieldAddonLeft\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonLeft\"></span>\n    <input  string-to-number ng-show=\"form.key\" type=\"number\" step=\"{{ form.precision || 'any' }}\" sf-changed=\"form\"\n           placeholder=\"{{form.placeholder}}\" class=\"form-control {{form.fieldHtmlClass}}\"\n           id=\"{{form.key.slice(-1)[0]}}\" ng-model-options=\"form.ngModelOptions\" ng-model=\"$$value$$\"\n           ng-disabled=\"form.readonly\" schema-validate=\"form\" name=\"{{form.key.slice(-1)[0]}}\"\n           aria-describedby=\"{{form.key.slice(-1)[0] + 'Status'}}\">\n    <span ng-if=\"form.fieldAddonRight\" class=\"input-group-addon\" ng-bind-html=\"form.fieldAddonRight\"></span>\n  </div>\n  <span ng-if=\"form.feedback !== false\" class=\"form-control-feedback\"\n        ng-class=\"evalInScope(form.feedback) || {'glyphicon': true, 'glyphicon-ok': hasSuccess(), 'glyphicon-remove': hasError() }\"\n        aria-hidden=\"true\">\n  </span> <span ng-if=\"hasError() || hasSuccess()\" id=\"{{form.key.slice(-1)[0] + 'Status'}}\"\n                class=\"sr-only\">{{ hasSuccess() ? '(success)' : '(error)' }}</span>\n  <div class=\"help-block\" sf-message=\"form.description\"></div>\n</div>","<div class=\"form-group schema-form-{{form.type}} {{form.htmlClass}}\"\n     ng-class=\"{'has-error': form.disableErrorState !== true && hasError(), 'has-success': form.disableSuccessState !== true && hasSuccess(), 'has-feedback': form.feedback !== false }\">\n  <label class=\"control-label {{form.labelHtmlClass}}\" ng-class=\"{'sr-only': !showTitle()}\"\n         for=\"{{form.key.slice(-1)[0]}}\">{{form.title}}</label>\n\n  <p class=\"input-group\">\n      <!--TODO:: removed schema-validate=\"form\" consider having a custom validator-->\n      <input type=\"text\"\n           id=\"{{form.key.slice(-1)[0]}}\"\n           class=\"form-control\"\n           sf-changed=\"form\"\n           placeholder=\"{{form.placeholder}}\"\n           uib-datepicker-popup=\"dd.MM.yyyy\"\n           ng-model=\"$$value$$\"\n           ng-model-options=\"form.ngModelOptions\"\n           is-open=\"form.open\"\n           min-date=\"form.minDate\"\n           max-date=\"form.maxDate\"\n           init-date=\"form.defaultDate\"\n           close-text=\"Close\"/>\n        <span class=\"input-group-btn\">\n             <button type=\"button\" class=\"btn btn-default\" ng-click=\"form.open = !form.open\"><i\n                 class=\"fa fa-calendar-o\"></i></button>\n        </span>\n  </p>\n  <span class=\"help-block\">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span>\n</div>","<div class=\"form-group\" ng-class=\"{'has-error': hasError()}\">\n    <label class=\"control-label\" ng-show=\"showTitle()\">{{form.title}}</label>\n\n    <div ui-ace=\"form.aceOptions\" style=\"form.style\" ng-model=\"$$value$$\" schema-validate=\"form\"></div>\n\n    <span class=\"help-block\">{{ (hasError() && errorMessage(schemaError())) || form.description}}</span>\n</div>","<div sf-array=\"form\" class=\"schema-form-array {{form.htmlClass}}\" ng-model=\"$$value$$\"\n     ng-model-options=\"form.ngModelOptions\">\n    <uib-accordion ng-model=\"modelArray\" ui-sortable=\"\">\n        <uib-accordion-group ng-repeat=\"item in modelArray track by $index\" is-open=\"item.open\">\n            <uib-accordion-heading class=\"{{form.fieldHtmlClass}}\">\n                {{interp(form.title,{'$index':$index, value: item}) || $index}}\n            </uib-accordion-heading>\n            <sf-decorator ng-init=\"arrayIndex = $index\" form=\"copyWithIndex($index)\"></sf-decorator>\n            <button ng-hide=\"form.readonly || form.remove === null\" ng-click=\"deleteFromArray($index)\" type=\"button\"\n                    class=\"btn btn-danger pull-right\">\n                Delete\n                <i class=\"fa fa-trash\"></i>\n            </button>\n        </uib-accordion-group>\n    </uib-accordion>\n    <div class=\"clearfix bottom-spaced\">\n        <button ng-hide=\"form.readonly || form.add === null\" ng-click=\"appendToArray();form.openLast()\" type=\"button\"\n                class=\"btn {{ form.style.add || 'btn-default' }} pull-right\">{{\n            form.add || 'Add'}}\n        </button>\n    </div>\n    <div class=\"help-block\" ng-show=\"(hasError() && errorMessage(schemaError())) || form.description\"\n         ng-bind-html=\"(hasError() && errorMessage(schemaError())) || form.description\"></div>\n</div>\n\n\n","<div class=\"modal-body\">\n    <table class=\"table table-striped\">\n        <tr ng-repeat=\"form in modal.forms\">\n            <td>{{ form.name}}</td>\n            <td>\n                <button class=\"btn btn-success btn-sm pull-right\" ng-click=\"modal.open(form)\">Open</button>\n                <button class=\"btn btn-danger margin-right-20 btn-sm pull-right\" ng-click=\"modal.delete($index, form)\">Delete</button>\n            </td>\n        </tr>\n    </table>\n</div>\n<div class=\"modal-footer\">\n    <button class=\"btn btn-success btn-sm\" type=\"button\" ng-click=\"modal.open({fields: []})\">New Form</button>\n    <button class=\"btn btn-warning btn-sm\" type=\"button\" ng-click=\"modal.cancel()\">Cancel</button>\n</div>","\n<div class=\"body-section\">\n    <div class=\"header\">\n        <h4>\n            <img src=\"images/logo.png\" alt=\"\">\n            Schema Form <strong>Builder</strong> <span class=\"grey\">/ {{ builder.model.name || 'Untitled Form'}}</span>\n            <a class=\"btn btn-sm btn-primary pull-right\" ng-click=\"builder.newForm()\">New Form</a>\n            <a class=\"btn btn-sm btn-warning pull-right margin-right-20\" ng-click=\"builder.openForm()\">My previous Forms</a>\n        </h4>\n    </div>\n    <div class=\"container\">\n        <!--<uib-alert type=\"default\">Build your own form</uib-alert>-->\n\n        <div class=\"row\">\n            <div class=\"col-sm-6 builder\">\n                <form name=\"builderForm\" ng-submit=\"builder.saveForm(builderForm)\">\n                    <div sf-schema=\"builder.schema\" sf-form=\"builder.form\" sf-model=\"builder.model\"\n                         sf-options=\"{ formDefaults: { ngModelOptions: { updateOn: 'blur' } }}\"></div>\n                </form>\n            </div>\n            <div class=\"col-sm-6 preview\">\n                <h4>preview</h4>\n                <div sf-schema=\"builder.display.schema\" sf-form=\"builder.display.form\"\n                     sf-model=\"builder.display.model\"></div>\n            </div>\n        </div>\n        <div class=\"instructions col-xs-12\" ng-class=\"{'visible' : builder.instructionsVisible}\">\n            <div class=\"\">\n                <div ng-if=\"builder.model.type == 'schema-form'\">\n                    <h2>Instructions <button class=\"btn btn-sm btn-primary pull-right\"\n                    ng-click=\"builder.instructionsVisible = false\">back</button> </h2>\n                    <p>In your angular project do the following</p>\n                    <h4>First, Install angular-schema form</h4>\n                    <p>Using bower:</p>\n                    <pre>bower install angular-schema-form</pre>\n                    <p>Using npm:</p>\n                    <pre>npm install angular-schema-form</pre></p>\n                    <p>Then add it as a dependency to your module</p>\n                    <pre>angular.module('myModule', ['schemaForm'])</pre>\n                    <div class=\"separated\"></div>\n                    <h4>Secondly, Specify your schema and form</h4>\n                    <p>In your controller, add the following schema and form an pass it to your views</p>\n                    <div class=\"row\">\n                        <div class=\"col-sm-6\">\n                            <h5>Schema</h5>\n                            <pre> {{ builder.output.schema | json }}</pre>\n                        </div>\n                        <div class=\"col-sm-6\">\n                            <h5>Forms</h5>\n                            <pre> {{ builder.output.form | json }}</pre>\n                        </div>\n                    </div>\n                    <div class=\"separated\"></div>\n                    <h4>Lastly, Display the form in your view</h4>\n                    <pre class=\"language-html\" data-lang=\"html\">\n                        &lt;form name=\"myForm\" ng-submit=\"submit()\"&gt; <br>\n                        &lt;div sf-schema=\"schema\" sf-form=\"form\" sf-model=\"model\"&gt;&lt;/div&gt;<br>\n                        &lt;input type=\"submit\" value=\"Submit\"&gt;<br>\n                            &lt;button type=\"button\" ng-click=\"goBack()\"&gt;Cancel&lt;/button&gt;<br>\n                        &lt;/form&gt;\n                    </pre>\n                </div>\n                <div ng-if=\"builder.model.type == 'bootstrap'\">\n                    <h3>To be created</h3>\n                    <pre> {{ builder.output | json }}</pre>\n                </div>\n\n            </div>\n        </div>\n    </div>\n</div>","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name builder\n   * @description\n   *\n   */\n  angular\n    .module('builder', [\n      'angular-growl',\n      'angular-locker',\n      'schemaForm',\n      'ui.bootstrap',\n      'ui.router',\n      'ui.sortable'\n    ]).config(['lockerProvider', function config(lockerProvider) {\n      lockerProvider.defaults({\n        driver: 'local',\n        namespace: 'ro',\n        separator: '.',\n        eventsEnabled: true,\n        extend: {}\n      });\n    }])\n    .config(['growlProvider', function (growlProvider) {\n      growlProvider.globalTimeToLive({success: 1000, error: 2000, warning: 3000, info: 4000});\n    }]);\n}());\n","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular\n    .module('builder').config(bootstrapTypeHeadDecorator);\n\n  function bootstrapTypeHeadDecorator(schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n    var typehead = function (name, schema, options) {\n      var form;\n      if (schema.type === 'typehead' || schema.type['x-schema-form'] === 'typehead' || (!_.isUndefined(form) && form.type === 'typehead')) {\n        form = schemaFormProvider.stdFormObj(name, schema, options);\n        options.lookup[sfPathProvider.stringify(options.path)] = form;\n        return form;\n      }\n    };\n\n    schemaFormProvider.defaults.string.unshift(typehead);\n\n    schemaFormDecoratorsProvider.addMapping(\n      'bootstrapDecorator',\n      'typehead',\n      'builder/decorators/typehead/bootstrap-typehead-decorator.tpl.html'\n    );\n    schemaFormDecoratorsProvider.createDirective(\n      'typehead',\n      'builder/decorators/typehead/bootstrap-typehead-decorator.tpl.html'\n    );\n  }\n\n}());\n","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular\n    .module('builder').config(bootstrapSimpleArrayDecorator);\n\n  function bootstrapSimpleArrayDecorator(schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n    schemaFormDecoratorsProvider.addMapping(\n      'bootstrapDecorator',\n      'simple-array',\n      'builder/decorators/simple-array/bootstrap-simple-array-decorator.tpl.html'\n    );\n    schemaFormDecoratorsProvider.createDirective(\n      'simple-array',\n      'builder/decorators/simple-array/bootstrap-simple-array-decorator.tpl.html'\n    );\n  }\n\n}());\n","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular\n    .module('builder').config(bootstrapTypeHeadDecorator);\n\n  function bootstrapTypeHeadDecorator(schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n\n    schemaFormDecoratorsProvider.addMapping(\n      'bootstrapDecorator',\n      'select-box',\n      'builder/decorators/select-box/bootstrap-select-box-decorator.tpl.html'\n    );\n    schemaFormDecoratorsProvider.createDirective(\n      'select-box',\n      'builder/decorators/select-box/bootstrap-select-box-decorator.tpl.html'\n    );\n  }\n\n}());\n","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular\n    .module('builder').config(bootstrapDecorator);\n\n  function bootstrapDecorator(schemaFormDecoratorsProvider) {\n    schemaFormDecoratorsProvider.addMapping(\n      'bootstrapDecorator',\n      'number',\n      'builder/decorators/number/bootstrap-number-decorator.tpl.html'\n    );\n  }\n\n}());\n","angular.module('schemaForm').config(\n  ['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider',\n    function(schemaFormProvider,  schemaFormDecoratorsProvider, sfPathProvider) {\n\n      var datepicker = function(name, schema, options) {\n        if (schema.type === 'string' && (schema.format === 'date')) {\n          var f = schemaFormProvider.stdFormObj(name, schema, options);\n          f.key  = options.path;\n          f.type = 'datepicker';\n          options.lookup[sfPathProvider.stringify(options.path)] = f;\n          return f;\n        }\n      };\n\n      schemaFormProvider.defaults.string.unshift(datepicker);\n\n      //Add to the bootstrap directive\n      schemaFormDecoratorsProvider.addMapping(\n        'bootstrapDecorator',\n        'datepicker',\n        'builder/decorators/datepicker/datepicker.html'\n      );\n      schemaFormDecoratorsProvider.createDirective(\n        'datepicker',\n        'builder/decorators/datepicker/datepicker.html'\n      );\n    }\n  ]);","angular.module('schemaForm').config(\n  ['schemaFormProvider', 'schemaFormDecoratorsProvider', 'sfPathProvider',\n    function (schemaFormProvider, schemaFormDecoratorsProvider, sfPathProvider) {\n\n      var ace = function (name, schema, options) {\n        if (schema.type === 'ace') {\n          var f = schemaFormProvider.stdFormObj(name, schema, options);\n          f.key = options.path;\n          f.type = 'ace';\n          options.lookup[sfPathProvider.stringify(options.path)] = f;\n          return f;\n        }\n      };\n\n      schemaFormProvider.defaults.string.unshift(ace);\n\n      //Add to the bootstrap directive\n      schemaFormDecoratorsProvider.addMapping('bootstrapDecorator', 'ace',\n        'builder/decorators/ace/ui-ace.html');\n      schemaFormDecoratorsProvider.createDirective('ace',\n        'builder/decorators/ace/ui-ace.html');\n    }]);","(function () {\n  'use strict';\n\n  /* @ngdoc object\n   * @name core\n   * @description\n   *\n   */\n  angular\n    .module('builder').config(bootstrapAccordionArrayDecorator);\n\n  function bootstrapAccordionArrayDecorator(schemaFormProvider,  schemaFormDecoratorsProvider, sfPathProvider) {\n\n    //var accordion = function (name, schema, options) {\n    //    var f = schemaFormProvider.stdFormObj(name, schema, options);\n    //\n    //    f.openLast = function(){\n    //      alert('open');\n    //    };\n    //    options.lookup[sfPathProvider.stringify(options.path)] = f;\n    //    return f;\n    //};\n    //\n    //schemaFormProvider.defaults.array.unshift(accordion);\n\n    schemaFormDecoratorsProvider.addMapping(\n      'bootstrapDecorator',\n      'accordion-array',\n      'builder/decorators/accordion-array/bootstrap-accordion-array-decorator.tpl.html'\n    );\n    schemaFormDecoratorsProvider.createDirective(\n      'accordion-array',\n      'builder/decorators/accordion-array/bootstrap-accordion-array-decorator.tpl.html'\n    );\n  }\n\n}());\n","(function () {\n  'use strict';\n\n  /**\n   * @ngdoc service\n   * @name builder.factory:Converter\n   *\n   * @description\n   *\n   */\n  angular\n    .module('builder')\n    .factory('Converter', Converter);\n\n  function Converter() {\n    let ConverterBase = {};\n    ConverterBase.generateStandardAttributes = (field, output) => {\n\n      let form, formProps = [\n        'key',\n        'condition',\n        'onChange',\n        'notitle',\n        'showAdvanced',\n        'validationMessage',\n        'onChange',\n        'ngModelOptions',\n        'condition',\n        'fieldAddonLeft',\n        'fieldAddonRight',\n        'description',\n        'showAdvanced',\n        'validationMessage',\n        'onChange',\n        'feedback',\n        'disableSuccessState',\n        'disableErrorState',\n        'placeholder',\n        'ngModelOptions',\n        'readonly',\n        'htmlClass',\n        'destroyStrategy',\n        'copyValueTo',\n        'fieldHtmlClass',\n        'labelHtmlClass'\n      ];\n      output.schema.properties[field.key] = {\n        title: field.title,\n        description: field.description\n      };\n\n      form = _.pick(field, formProps);\n      output.form.push(form);\n      return output;\n    };\n\n    ConverterBase.updateForm = (output, key, attr, value) => {\n      let index = _.findKey(output.form, 'key', key);\n      output.form[index][attr] = value;\n      return output;\n    }\n\n    ConverterBase.generateTextField = (field, output) => {\n      output.schema.properties[field.key]['type'] = 'string';\n      return output;\n    };\n    ConverterBase.generateTextareaField = (field, output) => {\n      output.schema.properties[field.key]['type'] = 'string';\n      output = ConverterBase.updateForm(output, field.key, 'type', 'textarea');\n      return output;\n    };\n    ConverterBase.generateEmailField = (field, output) => {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'email';\n      return output;\n    };\n    ConverterBase.generateDropdownField = (field, output) => {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['enum'] = field.options;\n      return output;\n    };\n    ConverterBase.generateDateField = (field, output) => {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'date';\n      return output;\n    };\n    ConverterBase.generateTimeField = (field, output) => {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'time';\n      return output;\n    };\n    ConverterBase.generateDateTimeField = (field, output) => {\n      output.schema.properties[field.key]['type'] = 'string';\n      output.schema.properties[field.key]['format'] = 'date-time';\n      return output;\n    };\n\n    let buildSegment = (field, output) => {\n      let builder = _.camelCase('generate_' + field.type.replace('-', '_') + '_field');\n      output = ConverterBase.generateStandardAttributes(field, output);\n      if (typeof ConverterBase[builder] === 'function')\n        return ConverterBase[builder](field, output);\n      output.schema.properties[field.key] = {\n        type: field.type,\n        title: field.title\n      };\n      return output;\n    };\n\n    ConverterBase.generateFields = (model) => {\n      let output = {schema: {type: 'object', properties: {}}, form: []};\n      if (_.isArray(model.fields)) {\n        model.fields.forEach((field) => {\n            if (!_.isUndefined(field.type) && !_.isUndefined(field.key))\n              output = buildSegment(field, output)\n          }\n        );\n      }\n      return output;\n    };\n    return ConverterBase;\n  }\n}());\n","(function () {\n    'use strict';\n\n    class BuilderCtrl {\n      constructor(Converter, growl, locker, $scope, $uibModal) {\n        let vm = this;\n\n        vm.forms = locker.get('schema_forms', {}/* {\n         'sample_form': {\n         name: 'Sample Form',\n         type: 'schema-form',\n         fields: [\n         {\n         type: 'text',\n         key: 'first_name',\n         title: 'First name',\n         open: false\n         },\n         {\n         type: 'text',\n         key: 'last_name',\n         title: 'Last name',\n         open: false\n         },\n         {\n         type: 'email',\n         key: 'email',\n         title: 'Email',\n         open: false\n         },\n         {\n         type: 'date',\n         key: 'dob',\n         title: 'Date of Birth',\n         open: false\n         },\n         {\n         type: 'dropdown',\n         key: 'marital-status',\n         title: 'Marital Status',\n         open: false\n         },\n         {\n         type: 'date-time',\n         key: 'check-in',\n         title: 'Check In',\n         open: false\n         },\n         {\n         type: 'date-time',\n         key: 'check-out',\n         title: 'Check Out',\n         open: false\n         },\n         {\n         type: 'textarea',\n         key: 'bio',\n         title: 'Biography',\n         open: false\n         }\n         ]\n         }\n         }*/);\n        console.log(vm.forms);\n        vm.schema = {\n          type: 'object',\n          title: 'Comment',\n          properties: {\n            name: {\n              type: 'string'\n            },\n            type: {\n              type: 'string',\n              title: 'Form Output',\n              enum: [\n                'schema-form',\n                'bootstrap',\n              ]\n            },\n            fields: {\n              type: 'array',\n              title: 'Fields',\n              items: {\n                type: 'object',\n                properties: {\n                  open: {\n                    type: 'boolean',\n                    default: true\n                  },\n                  type: {\n                    title: 'Type',\n                    type: 'string',\n                    enum: [\n                      'text',\n                      'textarea',\n                      'number',\n                      'email',\n                      'password',\n                      'dropdown',\n                      'radios',\n                      'radios-inline',\n                      'radiobuttons',\n                      'checkbox',\n                      'checkboxes',\n                      'boolean',\n                      'date',\n                      'time',\n                      'date-time',\n                      'button',\n                      'submit',\n                      'reset',\n                      'help',\n                      'template'\n                    ]\n                  },\n                  key: {\n                    title: 'Key',\n                    type: 'string',\n                    //description: 'Unique identifier'\n                  },\n                  title: {\n                    condition: 'model.notitle',\n                    title: 'Title',\n                    type: 'string'\n                  },\n                  notitle: {\n                    type: 'boolean',\n                    title: 'Don\\'t show title'\n                  },\n                  description: {\n                    title: 'Description',\n                    type: 'string'\n                  },\n                  validationMessage: {\n                    title: 'Validation Message',\n                    description: 'A custom validation error message. It can be a string, an object with error codes as key and messages as values or a custom message function',\n                    type: 'string'\n                  },\n                  onChange: {\n                    title: 'onChange',\n                    description: 'onChange event handler, expression or function. For expression, <code>modelValue</code> and <code>form</code> are both available. For a function, they will be passed as parameters in that order',\n                    type: 'string'\n                  },\n                  feedback: {\n                    title: 'Feedback Icon',\n                    description: 'Inline feedback icons. To turn off just set feedback to false. If set to a string that string is evaluated by a ngClass in the decorators scope. If not set att all the default value is <code>{ \"glyphicon\": true, \"glyphicon-ok\": hasSuccess(), \"glyphicon-remove\": hasError() }</code>',\n                    type: 'string'\n                  },\n                  disableSuccessState: {\n                    type: 'boolean',\n                    title: 'Disable Success State',\n                    default: false\n                  },\n                  disableErrorState: {\n                    type: 'boolean',\n                    title: 'Disable Error State',\n                    default: false\n                  },\n                  placeholder: {\n                    title: 'Placeholder',\n                    description: 'Placeholder on inputs and textarea',\n                    type: 'string'\n                  },\n                  ngModelOptions: {\n                    title: 'ng-Model Options',\n                    description: 'Passed along to ng-model-options',\n                    type: 'string'\n                  },\n                  readonly: {\n                    type: 'boolean',\n                    title: 'Readonly',\n                    default: false\n                  },\n                  htmlClass: {\n                    title: 'Class',\n                    description: 'CSS Class(es) to be added to the container div e.g. : \\'street foobar\\'',\n                    type: 'string'\n                  },\n                  destroyStrategy: {\n                    title: 'Destroy Strategy',\n                    description: 'One of <code>null</code>, <code>empty</code> , <code>remove</code>, or <code>retain</code>. Changes model on $destroy event. default is <code>remove</code>.',\n                    type: 'string'\n                  },\n                  copyValueTo: {\n                    title: 'Copy Value To',\n                    description: 'Copy values to these schema keys e.g [\\'address.street\\']. The receiving fields can be shown, but the intent for them is to be hidden.',\n                    type: 'string'\n                  },\n                  fieldHtmlClass: {\n                    title: 'Field Class',\n                    description: 'CSS Class(es) to be added to field input (or similar)',\n                    type: 'string'\n                  },\n                  labelHtmlClass: {\n                    title: 'Label Class',\n                    description: 'CSS Class(es) to be added to the label of the field (or similar)',\n                    type: 'string'\n                  },\n                  condition: {\n                    title: 'Condition',\n                    description: 'Show or hide field depending on an angular expression e.g \\'model.age < 18\\'. The expression has access to <code>model</code>, <code>modelValue</code>, <code> arrayIndex</code>.  The condition need not reference a model value it could be anything on scope.',\n                    type: 'string'\n                  },\n                  fieldAddonLeft: {\n                    title: 'Field Addon - Left',\n                    description: 'Add html code to left of input field. For reference check <a target=\\'_blank\\' href=\\'http://getbootstrap.com/components/#input-groups\\'>bootstrap input groups</a>.',\n                    type: 'string'\n                  },\n                  fieldAddonRight: {\n                    title: 'Field Addon - Right',\n                    description: 'Add html code to right of input field. For reference check <a target=\\'_blank\\' href=\\'http://getbootstrap.com/components/#input-groups\\'>bootstrap input groups</a>.',\n                    type: 'string'\n                  },\n                  onClick: {\n                    title: 'onClick',\n                    description: 'Function to call when a button/submit is clicked',\n                    type: 'string'\n                  },\n                  showAdvanced: {\n                    title: 'Show advance options',\n                    type: 'boolean'\n                  }\n                },\n                required: [\n                  'type',\n                  'key'\n                ]\n              }\n            }\n          },\n          required: ['name']\n        };\n        vm.model = {};\n        vm.form = [\n          {\n            type: 'section',\n            htmlClass: 'row main-info',\n            items: [\n              {\n                key: 'name',\n                htmlClass: 'col-sm-6',\n                placeholder: 'name of the form',\n                notitle: true,\n                fieldHtmlClass: 'field-name',\n                labelHtmlClass: 'field-name-label'\n              },\n              {\n                key: 'type',\n                htmlClass: 'col-sm-6',\n                //notitle: true,\n                fieldHtmlClass: 'output-type',\n                labelHtmlClass: 'output-type-label'\n              },\n            ]\n          },\n          {\n            type: 'section',\n            htmlClass: 'my-field row',\n            items: [\n              {\n                type: 'section',\n                htmlClass: 'col-sm-6',\n                items: [\n                  {\n                    type: 'help',\n                    helpvalue: '<h4>My Fields:</h4>'\n                  }\n                ]\n              },\n              {\n                type: 'section',\n                htmlClass: 'col-sm-6',\n                items: [\n                  {\n                    type: 'button',\n                    onClick: function () {\n                      vm.instructionsVisible = true;\n                    },\n                    style: 'btn-success btn-sm pull-right',\n                    title: 'Generate Schema'\n                  },\n                  {\n                    type: 'submit',\n                    style: 'btn-success btn-sm pull-right margin-right-20',\n                    title: 'Save'\n                  }\n                ]\n              }\n            ]\n          },\n          {\n            key: 'fields',\n            type: 'accordion-array',\n            title: '{{ value.title || \"Field \"+ $index}}',\n            add: 'Add a new Field',\n            remove: 'Remove Field',\n            startEmpty: true,\n            items: [\n              {\n                key: 'fields[].title',\n                htmlClass: 'hide-label',\n                placeholder: 'Title'\n              },\n              {\n                type: 'section',\n                htmlClass: 'row',\n                items: [\n                  {\n                    key: 'fields[].type',\n                    placeholder: 'Type',\n                    notitle: true,\n                    htmlClass: 'col-sm-6 hide-label',\n                  },\n                  {\n                    key: 'fields[].key',\n                    //type: 'section',\n                    placeholder: 'Key (Unique Identifier)',\n                    notitle: true,\n                    htmlClass: 'col-sm-6 hide-label',\n                  }\n                ]\n              },\n              {\n                key: 'fields[].open',\n                notitle: true,\n                type: 'hidden'\n              },\n              {\n                key: 'fields[].description',\n                type: 'textarea',\n                placeholder: 'Description',\n                notitle: true,\n              },\n              {\n                type: 'section',\n                htmlClass: 'row',\n                items: [\n                  {\n                    key: 'fields[].notitle',\n                    htmlClass: 'col-sm-6'\n                  },\n                  {\n                    key: 'fields[].showAdvanced',\n                    htmlClass: 'col-sm-6'\n                  },\n                ]\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                type: 'help',\n                helpvalue: '<hr/>'\n              },\n              {\n                type: 'section',\n                htmlClass: 'row',\n                items: [\n                  {\n                    type: 'section',\n                    htmlClass: 'col-md-4',\n                    items: [\n                      {\n                        condition: 'model.fields[arrayIndex].showAdvanced',\n                        key: 'fields[].disableSuccessState'\n                      }\n                    ]\n                  },\n                  {\n                    type: 'section',\n                    htmlClass: 'col-md-4',\n                    items: [\n                      {\n                        condition: 'model.fields[arrayIndex].showAdvanced',\n                        key: 'fields[].disableErrorState'\n                      }\n                    ]\n                  },\n                  {\n                    type: 'section',\n                    htmlClass: 'col-md-4',\n                    items: [\n                      {\n                        condition: 'model.fields[arrayIndex].showAdvanced',\n                        key: 'fields[].readonly'\n                      },\n                    ]\n                  }\n                ]\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                type: 'help',\n                helpvalue: '<hr/>'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].validationMessage',\n                type: 'textarea'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].onChange',\n                type: 'textarea'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].feedback'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].placeholder'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].ngModelOptions',\n                type: 'textarea'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].htmlClass'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].destroyStrategy'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].copyValueTo'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].fieldHtmlClass'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].labelHtmlClass'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].condition'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                'key': 'fields[].fieldAddonLeft'\n              },\n              {\n                condition: 'model.fields[arrayIndex].showAdvanced',\n                key: 'fields[].fieldAddonRight'\n              }\n\n            ]\n          }\n        ];\n        vm.output = {schema: {}, form: []};\n\n        vm.saveForm = (form) => {\n          $scope.$broadcast('schemaFormValidate');\n          if (form.$valid) {\n            persistForm();\n          }\n        };\n        vm.newForm = () => {\n          persistForm();\n          vm.model = {\n            fields: []\n          };\n          console.log(vm.model);\n        };\n        vm.openForm = () => {\n          var modalInstance = $uibModal.open({\n            templateUrl: 'builder/views/open.tpl.html',\n            controller: function ($uibModalInstance, forms) {\n              let vm = this;\n              vm.forms = forms;\n              vm.open = function (form) {\n                $uibModalInstance.close(form);\n              };\n\n              vm.delete = function (index, form) {\n                if (confirm('About to delete ' + form.name)) {\n                  vm.forms.slice(vm.forms, index, 1);\n                  locker.put('schema_forms', vm.forms);\n                }\n              };\n\n              vm.cancel = function () {\n                $uibModalInstance.dismiss();\n              }\n            },\n            controllerAs: 'modal',\n            resolve: {\n              forms: function () {\n                return vm.forms;\n              }\n            }\n          });\n\n          modalInstance.result.then(function (form) {\n            persistForm();\n            vm.model = form;\n            generateOutput(vm.model);\n          });\n        };\n\n        if (!vm.model.name) {\n          vm.openForm();\n        }\n\n        function generateOutput(update) {\n          vm.output = Converter.generateFields(update);\n          console.log(vm.output);\n          vm.display = angular.copy(vm.output);\n        }\n\n        function persistForm() {\n          if (vm.model.name && vm.model.name.length > 0) {\n            vm.forms[_.snakeCase(vm.model.name)] = vm.model;\n            locker.put('schema_forms', vm.forms);\n            growl.success('Form ' + vm.model.name + ' Saved');\n          }\n        }\n\n\n        $scope.$watch(() => vm.model, function (update) {\n          generateOutput(update);\n        }, true);\n      }\n\n    }\n    /**\n     * @ngdoc object\n     * @name builder.controller:BuilderCtrl\n     *\n     * @description\n     *\n     */\n    angular.module('builder').controller('BuilderCtrl', BuilderCtrl);\n  }()\n);\n","(function () {\n  'use strict';\n\n  angular\n    .module('builder')\n    .config(config);\n\n  function config($stateProvider) {\n    $stateProvider\n      .state('builder', {\n        url: '/builder',\n        templateUrl: 'builder/views/builder.tpl.html',\n        controller: 'BuilderCtrl',\n        controllerAs: 'builder'\n      });\n  }\n}());\n","(function () {\n  'use strict';\n\n  angular\n    .module('schemaFormBuilder')\n    .config(config);\n\n  function config($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/builder');\n  }\n}());\n"],"sourceRoot":"/source/"}